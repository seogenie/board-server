type Chat {
  id: Int!
  message: [Message]!
  participants: [User]!
  createdAt: String!
  updatedAt: String
}

type Message {
  id: Int!
  text: String!
  # chatId: Int
  chat: Chat!
  user: User!
  createdAt: String!
  updatedAt: String
}

type Query {
  sayBaby(name: String!): Seojin!
  sayHello: String!
}

type Seojin {
  text: String!
  error: Boolean!
  iswhat: Int
}

type CompletePhoneVerificationResponse {
  ok: Boolean!
  error: String
  token: String
}

type Mutation {
  CompletePhoneVerification(phoneNumber: String!, key: String!): CompletePhoneVerificationResponse!
  EmailSignIn(email: String!, password: String!): EmailSignInResponse!
  EmalSignUp(name: String!, email: String!, profilePhoto: String!, password: String!): EmalSignUpResponse!
  FacebookConnect(name: String!, email: String, facebookId: String!): FacebookConnectResponse!
  StartPhoneVerification(phoneNumber: String!): StartPhoneVerificationResponse!
}

type EmailSignInResponse {
  ok: Boolean!
  error: String
  token: String
}

type EmalSignUpResponse {
  ok: Boolean!
  error: String
  token: String
}

type FacebookConnectResponse {
  ok: Boolean!
  error: String
  token: String
}

type User {
  id: Int!
  name: String
  profilePhoto: String
  email: String
  verifiedEmail: Boolean!
  phoneNumber: String
  verifiedPhoneNumber: Boolean!
  password: String
  facebookId: String
  chat: Chat
  message: [Message]
  createAt: String!
  updateAt: String
}

type StartPhoneVerificationResponse {
  ok: Boolean!
  error: String
}

type Verification {
  id: Int!
  target: String!
  payload: String!
  key: String!
  verified: Boolean!
  createdAt: String!
  updatedAt: String!
}
